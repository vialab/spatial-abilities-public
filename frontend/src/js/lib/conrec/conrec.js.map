{"version":3,"file":"conrec.js","sourceRoot":"","sources":["../src/conrec.ts"],"names":[],"mappings":"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AE,CAAC,EAAE,CAAC,CAAC;4CACZ,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;4CACZ,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;4CACZ,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;4CACZ,KAAK,CAAC;wCACV,KAAK,CAAC;4CACF,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;4CACZ,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;4CACZ,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;4CACZ,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;4CACZ,KAAK,CAAC;wCACV,KAAK,CAAC;4CACF,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;4CACZ,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;4CACZ,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;4CACZ,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;4CACZ,KAAK,CAAC;wCACV,KAAK,CAAC;4CACF,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;4CACZ,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;4CACZ,EAAE,GAAG,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;4CACnB,EAAE,GAAG,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;4CACnB,KAAK,CAAC;wCACV,KAAK,CAAC;4CACF,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;4CACZ,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;4CACZ,EAAE,GAAG,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;4CACnB,EAAE,GAAG,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;4CACnB,KAAK,CAAC;wCACV,KAAK,CAAC;4CACF,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;4CACZ,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;4CACZ,EAAE,GAAG,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;4CACnB,EAAE,GAAG,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;4CACnB,KAAK,CAAC;wCACV,KAAK,CAAC;4CACF,EAAE,GAAG,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;4CACnB,EAAE,GAAG,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;4CACnB,EAAE,GAAG,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;4CACnB,EAAE,GAAG,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;4CACnB,KAAK,CAAC;wCACV,KAAK,CAAC;4CACF,EAAE,GAAG,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;4CACnB,EAAE,GAAG,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;4CACnB,EAAE,GAAG,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;4CACnB,EAAE,GAAG,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;4CACnB,KAAK,CAAC;wCACV,KAAK,CAAC;4CACF,EAAE,GAAG,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;4CACnB,EAAE,GAAG,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;4CACnB,EAAE,GAAG,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;4CACnB,EAAE,GAAG,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;4CACnB,KAAK,CAAC;wCACV;4CACI,KAAK,CAAC;oCACd,CAAC;oCACD,2DAA2D;oCAC3D,8CAA8C;oCAC9C,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gCAC9C,CAAC;4BACL,CAAC;wBACL,CAAC;oBACL,CAAC;gBACL,CAAC;YACL,CAAC;QACL,CAAC;IACL,CAAC;IACL,aAAC;AAAD,CAAC,AArRD,IAqRC;AArRY,cAAM,SAqRlB,CAAA","sourcesContent":["/**\n * Copyright (c) 2010, Jason Davies.\n *\n * All rights reserved.  This code is based on Bradley White's Java version,\n * which is in turn based on Nicholas Yue's C++ version, which in turn is based\n * on Paul D. Bourke's original Fortran version.  See below for the respective\n * copyright notices.\n *\n * See http://local.wasp.uwa.edu.au/~pbourke/papers/conrec/ for the original\n * paper by Paul D. Bourke.\n *\n * The vector conversion code is based on http://apptree.net/conrec.htm by\n * Graham Cox.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *     * Redistributions of source code must retain the above copyright\n *       notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *     * Neither the name of the <organization> nor the\n *       names of its contributors may be used to endorse or promote products\n *       derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/** \n * Copyright (c) 1996-1997 Nicholas Yue\n *\n * This software is copyrighted by Nicholas Yue. This code is based on Paul D.\n * Bourke's CONREC.F routine.\n *\n * The authors hereby grant permission to use, copy, and distribute this\n * software and its documentation for any purpose, provided that existing\n * copyright notices are retained in all copies and that this notice is\n * included verbatim in any distributions. Additionally, the authors grant\n * permission to modify this software and its documentation for any purpose,\n * provided that such modifications are not distributed without the explicit\n * consent of the authors and that existing copyright notices are retained in\n * all copies. Some of the algorithms implemented by this software are\n * patented, observe all applicable patent law.\n *\n * IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR\n * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT\n * OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES THEREOF,\n * EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,\n * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE IS\n * PROVIDED ON AN \"AS IS\" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE NO\n * OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR\n * MODIFICATIONS.\n */\n//\nconst EPSILON = 1e-10;\n\nfunction pointsEqual(a, b) {\n    var x = a.x - b.x, y = a.y - b.y;\n    return x * x + y * y < EPSILON;\n}\n\ntype LinkedList = {\n    p: any,\n    prev: LinkedList,\n    next: LinkedList,\n    head?: LinkedList,\n    tail?: LinkedList,\n    closed?: boolean\n};\n\nfunction reverseList(list: LinkedList) {\n    var pp = list.head;\n\n    while (pp) {\n        // swap prev/next pointers\n        var temp = pp.next;\n        pp.next = pp.prev;\n        pp.prev = temp;\n\n        // continue through the list\n        pp = temp;\n    }\n\n    // swap head/tail pointers\n    var temp = list.head;\n    list.head = list.tail;\n    list.tail = temp;\n}\n\n\nclass ContourBuilder {\n    level: any;\n    s: LinkedList;\n    count: number;\n\n    constructor(level) {\n        this.level = level;\n        this.s = null;\n        this.count = 0;\n    }\n\n    remove_seq(list) {\n        // if list is the first item, static ptr s is updated\n        if (list.prev) {\n            list.prev.next = list.next;\n        } else {\n            this.s = list.next;\n        }\n\n        if (list.next) {\n            list.next.prev = list.prev;\n        }\n        --this.count;\n    }\n\n    addSegment(a, b) {\n        var ss = this.s;\n        var ma: LinkedList = null;\n        var mb: LinkedList = null;\n        var prependA = false;\n        var prependB = false;\n\n        while (ss) {\n            if (ma == null) {\n                // no match for a yet\n                if (pointsEqual(a, ss.head.p)) {\n                    ma = ss;\n                    prependA = true;\n                } else if (pointsEqual(a, ss.tail.p)) {\n                    ma = ss;\n                }\n            }\n            if (mb == null) {\n                // no match for b yet\n                if (pointsEqual(b, ss.head.p)) {\n                    mb = ss;\n                    prependB = true;\n                } else if (pointsEqual(b, ss.tail.p)) {\n                    mb = ss;\n                }\n            }\n            // if we matched both no need to continue searching\n            if (mb != null && ma != null) {\n                break;\n            } else {\n                ss = ss.next;\n            }\n        }\n\n        // c is the case selector based on which of ma and/or mb are set\n        var c = ((ma != null) ? 1 : 0) | ((mb != null) ? 2 : 0);\n\n        switch (c) {\n            case 0:   // both unmatched, add as new sequence\n                var aa: any = { p: a, prev: null };\n                var bb: any = { p: b, next: null };\n                aa.next = bb;\n                bb.prev = aa;\n\n                // create sequence element and push onto head of main list. The order\n                // of items in this list is unimportant\n                ma = { p: null, head: aa, tail: bb, next: this.s, prev: null, closed: false };\n                if (this.s) {\n                    this.s.prev = ma;\n                }\n                this.s = ma;\n\n                ++this.count;    // not essential - tracks number of unmerged sequences\n                break;\n\n            case 1:   // a matched, b did not - thus b extends sequence ma\n                var pp: LinkedList = { p: b, prev: null, next: null };\n\n                if (prependA) {\n                    pp.next = ma.head;\n                    pp.prev = null;\n                    ma.head.prev = pp;\n                    ma.head = pp;\n                } else {\n                    pp.next = null;\n                    pp.prev = ma.tail;\n                    ma.tail.next = pp;\n                    ma.tail = pp;\n                }\n                break;\n\n            case 2:   // b matched, a did not - thus a extends sequence mb\n                var pp: LinkedList = { p: a, prev: null, next: null };\n\n                if (prependB) {\n                    pp.next = mb.head;\n                    pp.prev = null;\n                    mb.head.prev = pp;\n                    mb.head = pp;\n                } else {\n                    pp.next = null;\n                    pp.prev = mb.tail;\n                    mb.tail.next = pp;\n                    mb.tail = pp;\n                }\n                break;\n\n            case 3:   // both matched, can merge sequences\n                // if the sequences are the same, do nothing, as we are simply closing this path (could set a flag)\n\n                if (ma === mb) {\n                    var pp: LinkedList = { p: ma.tail.p, next: ma.head, prev: null };\n                    ma.head.prev = pp;\n                    ma.head = pp;\n                    ma.closed = true;\n                    break;\n                }\n\n                // there are 4 ways the sequence pair can be joined. The current setting of prependA and\n                // prependB will tell us which type of join is needed. For head/head and tail/tail joins\n                // one sequence needs to be reversed\n                switch ((prependA ? 1 : 0) | (prependB ? 2 : 0)) {\n                    case 0:   // tail-tail\n                        // reverse ma and append to mb\n                        reverseList(ma);\n                    // fall through to head/tail case\n                    case 1:   // head-tail\n                        // ma is appended to mb and ma discarded\n                        mb.tail.next = ma.head;\n                        ma.head.prev = mb.tail;\n                        mb.tail = ma.tail;\n\n                        //discard ma sequence record\n                        this.remove_seq(ma);\n                        break;\n\n                    case 3:   // head-head\n                        // reverse ma and append mb to it\n                        reverseList(ma);\n                    // fall through to tail/head case\n                    case 2:   // tail-head\n                        // mb is appended to ma and mb is discarded\n                        ma.tail.next = mb.head;\n                        mb.head.prev = ma.tail;\n                        ma.tail = mb.tail;\n\n                        //discard mb sequence record\n                        this.remove_seq(mb);\n                        break;\n                }\n        }\n    }\n}\n\n/**\n * Implements CONREC.\n *\n * @param {function} drawContour function for drawing contour.  Defaults to a\n *                               custom \"contour builder\", which populates the\n *                               contours property.\n */\nexport class Conrec {\n    private contours: any; // ContourBuilder[]\n    private h: any[];\n    private sh: any[];\n    private xh: any[];\n    private yh: any[];\n\n    constructor() {\n        this.contours = {};\n        this.h = new Array(5);\n        this.sh = new Array(5);\n        this.xh = new Array(5);\n        this.yh = new Array(5);\n    }\n\n    /**\n     * drawContour - interface for implementing the user supplied method to\n     * render the countours.\n     *\n     * Draws a line between the start and end coordinates.\n     *\n     * @param startX    - start coordinate for X\n     * @param startY    - start coordinate for Y\n     * @param endX      - end coordinate for X\n     * @param endY      - end coordinate for Y\n     * @param contourLevel - Contour level for line.\n     */\n    private drawContour(startX, startY, endX, endY, contourLevel, k) {\n        let cb = this.contours[k];\n        if (!cb) {\n            cb = this.contours[k] = new ContourBuilder(contourLevel);\n        }\n        cb.addSegment({ x: startX, y: startY }, { x: endX, y: endY });\n    }\n\n    contourList() {\n        var l = [];\n        var a = this.contours;\n        for (var k in a) {\n            var s = a[k].s;\n            var level = a[k].level;\n            while (s) {\n                var h = s.head;\n                var l2: any = []; // XXX: setting properties on a list (l2.k = ...) is an ugly hack! because they are invisible...\n                l2.level = level;\n                l2.k = k;\n                while (h && h.p) {\n                    l2.push(h.p);\n                    h = h.next;\n                }\n                l.push(l2);\n                s = s.next;\n            }\n        }\n        l.sort(function (a, b) { return a.k - b.k });\n        return l;\n    }\n\n    /**\n     * contour is a contouring subroutine for rectangularily spaced data\n     *\n     * It emits calls to a line drawing subroutine supplied by the user which\n     * draws a contour map corresponding to real*4data on a randomly spaced\n     * rectangular grid. The coordinates emitted are in the same units given in\n     * the x() and y() arrays.\n     *\n     * Any number of contour levels may be specified but they must be in order of\n     * increasing value.\n     *\n     * IMPORTANT! This version (2.2+) now assumes row-major, but linearized matrix layout,\n     *            unlike in 2.1.0 of conrec.ts\n     * \n     * @param {number[]} data - data to contour: linearized row-major matrix of size \n     *                          (y.length rows, x.length columns)\n     * @param {number} x_lo,x_hi,y_lo,y_hi - index bounds of data matrix\n     *\n     *             The following two, one dimensional arrays (x and y) contain\n     *             the horizontal and vertical coordinates of each sample points.\n     * @param {number[]} x  - data matrix column coordinates\n     * @param {number[]} y  - data matrix row coordinates\n     * @param {number[]} z  - contour levels in increasing order.\n     */\n    contour(data: number[], \n            x_lo: number, x_hi: number, y_lo: number, y_hi: number, \n            x: number[], y: number[], z: number[]) \n    {\n        var width = x.length;\n        var h = this.h, sh = this.sh, xh = this.xh, yh = this.yh;\n        this.contours = {};\n        if (data.length != x.length * y.length) \n            throw new Error('data matrix should have x.length * y.length elements');\n\n        /** private */\n        var xsect = function (p1, p2) {\n            return (h[p2] * xh[p1] - h[p1] * xh[p2]) / (h[p2] - h[p1]);\n        }\n\n        var ysect = function (p1, p2) {\n            return (h[p2] * yh[p1] - h[p1] * yh[p2]) / (h[p2] - h[p1]);\n        }\n        var m1;\n        var m2;\n        var m3;\n        var case_value;\n        var dmin;\n        var dmax;\n        var x1 = 0.0;\n        var x2 = 0.0;\n        var y1 = 0.0;\n        var y2 = 0.0;\n\n        // The indexing of im and jm should be noted as it has to start from zero\n        // unlike the fortran counter part\n        var im = [0, 1, 1, 0];\n        var jm = [0, 0, 1, 1];\n\n        // Note that castab is arranged differently from the FORTRAN code because\n        // Fortran and C/C++ arrays are transposed of each other, in this case\n        // it is more tricky as castab is in 3 dimensions\n        const castab = [\n            [\n                [0, 0, 8], [0, 2, 5], [7, 6, 9]\n            ],\n            [\n                [0, 3, 4], [1, 3, 1], [4, 3, 0]\n            ],\n            [\n                [9, 6, 7], [5, 2, 0], [8, 0, 0]\n            ]\n        ];\n\n        for (var j = (y_hi - 1); j >= y_lo; j--) {\n            for (var i = x_lo; i <= x_hi - 1; i++) {\n                var temp1, temp2;\n                let ii = i + j * width;\n                temp1 = Math.min(data[ii], data[ii + width]);\n                temp2 = Math.min(data[ii + 1], data[ii + 1 + width]);\n                dmin = Math.min(temp1, temp2);\n                temp1 = Math.max(data[ii], data[ii + width]);\n                temp2 = Math.max(data[ii + 1], data[ii + 1 + width]);\n                dmax = Math.max(temp1, temp2);\n\n                if (dmax >= z[0] && dmin <= z[z.length - 1]) {\n                    for (var k = 0; k < z.length; k++) {\n                        if (z[k] >= dmin && z[k] <= dmax) {\n                            for (var m = 4; m >= 0; m--) {\n                                if (m > 0) {\n                                    // The indexing of im and jm should be noted as it has to\n                                    // start from zero\n                                    h[m] = data[ii + im[m - 1] + jm[m - 1] * width] - z[k]; \n                                    xh[m] = x[i + im[m - 1]];\n                                    yh[m] = y[j + jm[m - 1]];\n                                } else {\n                                    h[0] = 0.25 * (h[1] + h[2] + h[3] + h[4]);\n                                    xh[0] = 0.5 * (x[i] + x[i + 1]);\n                                    yh[0] = 0.5 * (y[j] + y[j + 1]);\n                                }\n\n                                if (h[m] > EPSILON) {\n                                    sh[m] = 1;\n                                } else if (h[m] < -EPSILON) {\n                                    sh[m] = -1;\n                                } else {\n                                    sh[m] = 0;\n                                }\n                            }\n\n                            /**\n                             * Note: at this stage the relative heights of the corners and the\n                             * centre are in the h array, and the corresponding coordinates are\n                             * in the xh and yh arrays. The centre of the box is indexed by 0\n                             * and the 4 corners by 1 to 4 as shown below.\n                             * Each triangle is then indexed by the parameter m, and the 3\n                             * vertices of each triangle are indexed by parameters m1,m2,and\n                             * m3.\n                             * It is assumed that the centre of the box is always vertex 2\n                             * though this isimportant only when all 3 vertices lie exactly on\n                             * the same contour level, in which case only the side of the box\n                             * is drawn.\n                             *\n                             *\n                             *      vertex 4 +-------------------+ vertex 3\n                             *               | \\               / |\n                             *               |   \\    m-3    /   |\n                             *               |     \\       /     |\n                             *               |       \\   /       |\n                             *               |  m=2    X   m=2   |       the centre is vertex 0\n                             *               |       /   \\       |\n                             *               |     /       \\     |\n                             *               |   /    m=1    \\   |\n                             *               | /               \\ |\n                             *      vertex 1 +-------------------+ vertex 2\n                             *\n                             *\n                             *\n                             *               Scan each triangle in the box\n                             */\n\n                            for (m = 1; m <= 4; m++) {\n                                m1 = m;\n                                m2 = 0;\n                                if (m != 4) {\n                                    m3 = m + 1;\n                                } else {\n                                    m3 = 1;\n                                }\n                                case_value = castab[sh[m1] + 1][sh[m2] + 1][sh[m3] + 1];\n                                if (case_value != 0) {\n                                    switch (case_value) {\n                                        case 1: // Line between vertices 1 and 2\n                                            x1 = xh[m1];\n                                            y1 = yh[m1];\n                                            x2 = xh[m2];\n                                            y2 = yh[m2];\n                                            break;\n                                        case 2: // Line between vertices 2 and 3\n                                            x1 = xh[m2];\n                                            y1 = yh[m2];\n                                            x2 = xh[m3];\n                                            y2 = yh[m3];\n                                            break;\n                                        case 3: // Line between vertices 3 and 1\n                                            x1 = xh[m3];\n                                            y1 = yh[m3];\n                                            x2 = xh[m1];\n                                            y2 = yh[m1];\n                                            break;\n                                        case 4: // Line between vertex 1 and side 2-3\n                                            x1 = xh[m1];\n                                            y1 = yh[m1];\n                                            x2 = xsect(m2, m3);\n                                            y2 = ysect(m2, m3);\n                                            break;\n                                        case 5: // Line between vertex 2 and side 3-1\n                                            x1 = xh[m2];\n                                            y1 = yh[m2];\n                                            x2 = xsect(m3, m1);\n                                            y2 = ysect(m3, m1);\n                                            break;\n                                        case 6: //  Line between vertex 3 and side 1-2\n                                            x1 = xh[m3];\n                                            y1 = yh[m3];\n                                            x2 = xsect(m1, m2);\n                                            y2 = ysect(m1, m2);\n                                            break;\n                                        case 7: // Line between sides 1-2 and 2-3\n                                            x1 = xsect(m1, m2);\n                                            y1 = ysect(m1, m2);\n                                            x2 = xsect(m2, m3);\n                                            y2 = ysect(m2, m3);\n                                            break;\n                                        case 8: // Line between sides 2-3 and 3-1\n                                            x1 = xsect(m2, m3);\n                                            y1 = ysect(m2, m3);\n                                            x2 = xsect(m3, m1);\n                                            y2 = ysect(m3, m1);\n                                            break;\n                                        case 9: // Line between sides 3-1 and 1-2\n                                            x1 = xsect(m3, m1);\n                                            y1 = ysect(m3, m1);\n                                            x2 = xsect(m1, m2);\n                                            y2 = ysect(m1, m2);\n                                            break;\n                                        default:\n                                            break;\n                                    }\n                                    // Put your processing code here and comment out the printf\n                                    //printf(\"%f %f %f %f %f\\n\",x1,y1,x2,y2,z[k]);\n                                    this.drawContour(x1, y1, x2, y2, z[k], k);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n"]}